// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  published Boolean   @default(false)
  category  String
  imageUrl  String?
  authorId  String
  votes     Vote[]
  reports   Report[]
  comments  Comment[]
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id        Int      @id @default(autoincrement())
  postId    Int
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  post Post @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String
  createdAt DateTime @default(now())
  userId    String
  post Post @relation(fields: [postId], references: [id])
}

model Vote {
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  type   VoteType
  userId String

  @@id([postId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
